<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
const int maxArgs = 16;
void IncIndent()
{
	PushIndent("    ");
}
void DecIndent()
{
    PopIndent();
}

String MakeTuple(String type, int count) => String.Join("", Enumerable.Empty<String>().Append(String.Join(", ", Enumerable.Repeat(type, count))).Prepend("(").Append(")"));

void WriteSignature(int argCount)
{
    var retTup = MakeTuple("TOut", argCount);
    var inTup = MakeTuple("TIn", argCount);
    WriteLine($"public static {retTup} Map<TIn, TOut>(this {inTup} input, Func<TIn, TOut> mapper)");
}

void WriteBody(int argCount)
{
    var maps = new String[argCount];
    while(argCount --> 0)
    {
        maps[argCount] = $"mapper(input.Item{argCount+1})";
    }
    var text = String.Join("", Enumerable.Empty<String>().Append("(").Append(String.Join(", ", maps)).Append(")"));
    WriteLine($"=> {text};");
}

#>
namespace WeaverAnnotations.Util.Xtn
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.CompilerServices;
    using System.Text;

    public static partial class Util
    {
<#
IncIndent();
IncIndent();
for(Int32 i = 2; i < maxArgs; ++i)
{
    WriteSignature(i);
    IncIndent();
    WriteBody(i);
    DecIndent();
}
DecIndent();
DecIndent();
#>
    }
}
